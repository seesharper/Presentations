<html>
  <head>
    <title>The Future of .Net</title>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
    <link
      href="http://fonts.googleapis.com/css?family=Droid+Sans+Mono"
      rel="stylesheet"
      type="text/css"
    />
    <style type="text/css">
      @import url(http://fonts.googleapis.com/css?family=Open+Sans);
      @import url(http://fonts.googleapis.com/css?family=Droid+Serif:400,700,400italic);
      @import url(http://fonts.googleapis.com/css?family=Ubuntu+Mono:400,700,400italic);

      body {
        font-family: 'Open Sans';
      }

      code {
        -moz-border-radius: 5px;
        -web-border-radius: 5px;
        background: #e7e8e2;
        border-radius: 5px;
      }

      h1,
      h2,
      h3 {
        font-family: 'Open Sans';
        font-weight: normal;
      }

      .remark-code,
      .remark-inline-code {
        font-family: 'Droid Sans Mono', font-weight: normal;
      }
    </style>
  </head>

  <body>
    <textarea id="source">

class: center, middle

# The road ahead for C# and .Net

---

# Agenda

* ## DotNetCore 3.0
* ## AspNetCore3.0
* ## C#8

https://github.com/aspnet/AspNetCore

---

# .Net Core 3.0

* ## C#8
* ## Default executables
* ## WPF/Winforms (Windows only)
* ## JSon.Net is out
* ## Utf8JsonReader/Utf8JsonWriter is in
* ## Performance

https://www.techempower.com/benchmarks/#section=data-r17&hw=ph&test=plaintext

---
background-size: 80%
background-image: url(https://user-images.githubusercontent.com/1034073/55684303-ecb0b880-5949-11e9-90ee-bfcb8b156a08.png)
---
# AspNetCore 3.0

* ## Runs ONLY on .NetCore
* ## HostBuilder replaces WebHostBuilder
* ## A lot of perf improvements.


https://github.com/aspnet/AspNetCore/issues/3753

https://www.techempower.com/benchmarks/#section=data-r17&hw=ph&test=plaintext

---


# C#8

* ## Nullable reference types
* ## Switch Expressions
* ## Async streams
* ## Array Ranges
* ## Span&lt; T &gt; / Memory&lt; T &gt;
* ## Unload assemblies

---
# Array Ranges

```cs
int[] numbers = new int[] { 1, 2, 3, 4 };
var firstTwo = numbers[0..2];
var exceptFirstAndLast = numbers[1..^1];
```
---

# Async streams

```cs
public static async Task Execute()
{
  await foreach (var number in GetNumbersAsync())
  {
    Console.WriteLine(number);
  };
}

private static async IAsyncEnumerable<int> GetNumbersAsync()
{
  int[] numbers = new int[] { 1, 2, 3, 4 };
  foreach (var number in numbers)
  {
    await Task.Delay(10);
    yield return number;
  }
}

```
---
background-size: 70%
background-image:url(https://user-images.githubusercontent.com/1034073/55797635-42619e00-5acd-11e9-8542-580b03d447f0.png)
---
# Blazor

* ## https://blazor.net/

---

background-size: 50%
background-image:url(https://user-images.githubusercontent.com/1034073/55755727-1c49e880-5a50-11e9-82cb-fbec3b3c0571.png)
---
class: center, middle
## Tony Horare
## The billion dollar mistake


https://en.wikipedia.org/wiki/Tony_Hoare
---
class: center, middle
# So how to fix this in C#?

* ## Without breaking ALL existing code?
---



# Nullable reference types

## * No more NullReferenceExceptions
## * Opt-in
## * A compiler feature
## * Emits warnings, not erros.

---

## Nullable reference types

```
public static class Foo
{
  public static void Execute(Bar bar)
  {
    bar.Execute();
  }
}

public class Bar
{
  public void Execute()
  {
  }
}
```



## Demo

---
## * What about netstandard?
## * Will there be a netstandard 3.0?
## * NetCoreApp = NetStandard2.0 + additional features
## * Is .Net Framework dying?
## * What about Mono?

---

# NetStandard 2.1

* ## Span/Memory&lt; T &gt;
* ## ValueTask/ValueTask&lt; T &gt;
* ## DbProviderFactories
* ## 800+ new API's

---

# NetCoreApp vs NetStandard

* ## NetStandard is a standard
* ## NetCoreApp is a platform/runtime

---



    </textarea>
    <script
      src="http://gnab.github.io/remark/downloads/remark-latest.min.js"
      type="text/javascript"
    ></script>
    <script type="text/javascript">
      var hljs = remark.highlighter.engine;
    </script>
    <script type="text/javascript">
      var slideshow = remark.create({
        highlightStyle: "monokai",
        highlightLanguage: "cs",
        ratio: "16:9"
      });
    </script>
  </body>
</html>
